/*
 *    Copyright (c) 1993-1997 Science Applications International Corporation.
 */

/*
 * NAME
 *    assoc_ArrayStructs.h
 *
 * SYNOPSIS
 *    Constants and declarations for the "Assoc" structure
 *    to be used with GDI Array Structs.
 *
 * AUTHOR
 *    Generated by gdi_gen_Astructs 110.2 08/20/97.
 *
 */

#ifndef ASSOC_ASTRUCTS_H
#define ASSOC_ASTRUCTS_H

#include "gdi_ArrayStructs.h"
#include "db_assoc.h"


/*
 *  "db30" macros to convert libdb30 calls to libgdi calls
 */
#ifdef USE_DB30_MACROS
#define get_assoc(table_name, where, tuples, maxrecs) \
                     gdi_where_ArrayStructs (gdi_get_stdconn(), (table_name), \
                                             (where), (void *) (tuples), \
                                             (maxrecs), &ASSOC_CONTAINER_DEF)

#define assoc_Aadd(table_name, tuples, ntuples, qa_flag) \
                     gdi_add_ArrayStructs (gdi_get_stdconn(), (table_name), \
                                           (void *) (tuples), (ntuples), \
                                           &ASSOC_CONTAINER_DEF)

/*
 *    allocate an empty tuple as a constant.
 */
static ArrayStructsArgs ASSOC_CONTAINER_DEF =
{
      sizeof(Assoc),
      0,
      (int *) NULL,
      (void *) NULL,
      (void *) &Na_Assoc,
      Assoc_Attr,
      0,
      0,
      "assoc"
};

#endif /* USE_DB30_MACROS */


/*
 *  The query used to create the "Assoc" structures:
 *       SELECT * from assoc
 *
 */
#define Na_Assoc_Init \
{ \
	-1,	/*	arid 	*/ \
	-1,	/*	orid 	*/ \
	"-",	/*	sta 	*/ \
	"-",	/*	phase 	*/ \
	-1.0,	/*	belief 	*/ \
	-1.0,	/*	delta 	*/ \
	-999.0,	/*	seaz 	*/ \
	-999.0,	/*	esaz 	*/ \
	-999.0,	/*	timeres 	*/ \
	"-",	/*	timedef 	*/ \
	-999.0,	/*	azres 	*/ \
	"-",	/*	azdef 	*/ \
	-999.0,	/*	slores 	*/ \
	"-",	/*	slodef 	*/ \
	-999.0,	/*	emares 	*/ \
	-1.0,	/*	wgt 	*/ \
	"-",	/*	vmodel 	*/ \
	-1,	/*	commid 	*/ \
	"19700101 00:00:00"	/*	lddate 	*/ \
}

#define Assoc_Attr_Init \
{ \
	{ "arid",	offsetof(Assoc, arid),	sizeof_(Assoc, arid),	ASlong_t }, \
	{ "orid",	offsetof(Assoc, orid),	sizeof_(Assoc, orid),	ASlong_t }, \
	{ "sta",	offsetof(Assoc, sta[0]),	sizeof_(Assoc, sta),	AScarray_t }, \
	{ "phase",	offsetof(Assoc, phase[0]),	sizeof_(Assoc, phase),	AScarray_t }, \
	{ "belief",	offsetof(Assoc, belief),	sizeof_(Assoc, belief),	ASdouble_t }, \
	{ "delta",	offsetof(Assoc, delta),	sizeof_(Assoc, delta),	ASdouble_t }, \
	{ "seaz",	offsetof(Assoc, seaz),	sizeof_(Assoc, seaz),	ASdouble_t }, \
	{ "esaz",	offsetof(Assoc, esaz),	sizeof_(Assoc, esaz),	ASdouble_t }, \
	{ "timeres",	offsetof(Assoc, timeres),	sizeof_(Assoc, timeres),	ASdouble_t }, \
	{ "timedef",	offsetof(Assoc, timedef[0]),	sizeof_(Assoc, timedef),	AScarray_t }, \
	{ "azres",	offsetof(Assoc, azres),	sizeof_(Assoc, azres),	ASdouble_t }, \
	{ "azdef",	offsetof(Assoc, azdef[0]),	sizeof_(Assoc, azdef),	AScarray_t }, \
	{ "slores",	offsetof(Assoc, slores),	sizeof_(Assoc, slores),	ASdouble_t }, \
	{ "slodef",	offsetof(Assoc, slodef[0]),	sizeof_(Assoc, slodef),	AScarray_t }, \
	{ "emares",	offsetof(Assoc, emares),	sizeof_(Assoc, emares),	ASdouble_t }, \
	{ "wgt",	offsetof(Assoc, wgt),	sizeof_(Assoc, wgt),	ASdouble_t }, \
	{ "vmodel",	offsetof(Assoc, vmodel[0]),	sizeof_(Assoc, vmodel),	AScarray_t }, \
	{ "commid",	offsetof(Assoc, commid),	sizeof_(Assoc, commid),	ASlong_t }, \
	{ "lddate",	offsetof(Assoc, lddate[0]),	sizeof_(Assoc, lddate),	AScarray_t }, \
	{ (char *) 0 } \
}


#endif /* ASSOC_ASTRUCTS_H */
