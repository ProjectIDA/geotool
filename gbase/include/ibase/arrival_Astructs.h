/*
 *    Copyright (c) 1993-1997 Science Applications International Corporation.
 */

/*
 * NAME
 *    arrival_ArrayStructs.h
 *
 * SYNOPSIS
 *    Constants and declarations for the "Arrival" structure
 *    to be used with GDI Array Structs.
 *
 * AUTHOR
 *    Generated by gdi_gen_Astructs 110.2 08/20/97.
 *
 */

#ifndef ARRIVAL_ASTRUCTS_H
#define ARRIVAL_ASTRUCTS_H

#include "gdi_ArrayStructs.h"
#include "db_arrival.h"


/*
 *  "db30" macros to convert libdb30 calls to libgdi calls
 */
#ifdef USE_DB30_MACROS
#define get_arrival(table_name, where, tuples, maxrecs) \
                     gdi_where_ArrayStructs (gdi_get_stdconn(), (table_name), \
                                             (where), (void *) (tuples), \
                                             (maxrecs), &ARRIVAL_CONTAINER_DEF)

#define arrival_Aadd(table_name, tuples, ntuples, qa_flag) \
                     gdi_add_ArrayStructs (gdi_get_stdconn(), (table_name), \
                                           (void *) (tuples), (ntuples), \
                                           &ARRIVAL_CONTAINER_DEF)

/*
 *    allocate an empty tuple as a constant.
 */
static ArrayStructsArgs ARRIVAL_CONTAINER_DEF =
{
      sizeof(Arrival),
      0,
      (int *) NULL,
      (void *) NULL,
      (void *) &Na_Arrival,
      Arrival_Attr,
      0,
      0,
      "arrival"
};

#endif /* USE_DB30_MACROS */


/*
 *  The query used to create the "Arrival" structures:
 *       SELECT * from arrival
 *
 */
#define Na_Arrival_Init \
{ \
	"-",	/*	sta 	*/ \
	-9999999999.999,	/*	time 	*/ \
	-1,	/*	arid 	*/ \
	-1,	/*	jdate 	*/ \
	-1,	/*	stassid 	*/ \
	-1,	/*	chanid 	*/ \
	"-",	/*	chan 	*/ \
	"-",	/*	iphase 	*/ \
	"-",	/*	stype 	*/ \
	-1.0,	/*	deltim 	*/ \
	-1.0,	/*	azimuth 	*/ \
	-1.0,	/*	delaz 	*/ \
	-1.0,	/*	slow 	*/ \
	-1.0,	/*	delslo 	*/ \
	-1.0,	/*	ema 	*/ \
	-1.0,	/*	rect 	*/ \
	-1.0,	/*	amp 	*/ \
	-1.0,	/*	per 	*/ \
	-999.0,	/*	logat 	*/ \
	"-",	/*	clip 	*/ \
	"-",	/*	fm 	*/ \
	-1.0,	/*	snr 	*/ \
	"-",	/*	qual 	*/ \
	"-",	/*	auth 	*/ \
	-1,	/*	commid 	*/ \
	"19700101 00:00:00"	/*	lddate 	*/ \
}

#define Arrival_Attr_Init \
{ \
	{ "sta",	offsetof(Arrival, sta[0]),	sizeof_(Arrival, sta),	AScarray_t }, \
	{ "time",	offsetof(Arrival, time),	sizeof_(Arrival, time),	ASdouble_t }, \
	{ "arid",	offsetof(Arrival, arid),	sizeof_(Arrival, arid),	ASlong_t }, \
	{ "jdate",	offsetof(Arrival, jdate),	sizeof_(Arrival, jdate),	ASlong_t }, \
	{ "stassid",	offsetof(Arrival, stassid),	sizeof_(Arrival, stassid),	ASlong_t }, \
	{ "chanid",	offsetof(Arrival, chanid),	sizeof_(Arrival, chanid),	ASlong_t }, \
	{ "chan",	offsetof(Arrival, chan[0]),	sizeof_(Arrival, chan),	AScarray_t }, \
	{ "iphase",	offsetof(Arrival, iphase[0]),	sizeof_(Arrival, iphase),	AScarray_t }, \
	{ "stype",	offsetof(Arrival, stype[0]),	sizeof_(Arrival, stype),	AScarray_t }, \
	{ "deltim",	offsetof(Arrival, deltim),	sizeof_(Arrival, deltim),	ASdouble_t }, \
	{ "azimuth",	offsetof(Arrival, azimuth),	sizeof_(Arrival, azimuth),	ASdouble_t }, \
	{ "delaz",	offsetof(Arrival, delaz),	sizeof_(Arrival, delaz),	ASdouble_t }, \
	{ "slow",	offsetof(Arrival, slow),	sizeof_(Arrival, slow),	ASdouble_t }, \
	{ "delslo",	offsetof(Arrival, delslo),	sizeof_(Arrival, delslo),	ASdouble_t }, \
	{ "ema",	offsetof(Arrival, ema),	sizeof_(Arrival, ema),	ASdouble_t }, \
	{ "rect",	offsetof(Arrival, rect),	sizeof_(Arrival, rect),	ASdouble_t }, \
	{ "amp",	offsetof(Arrival, amp),	sizeof_(Arrival, amp),	ASdouble_t }, \
	{ "per",	offsetof(Arrival, per),	sizeof_(Arrival, per),	ASdouble_t }, \
	{ "logat",	offsetof(Arrival, logat),	sizeof_(Arrival, logat),	ASdouble_t }, \
	{ "clip",	offsetof(Arrival, clip[0]),	sizeof_(Arrival, clip),	AScarray_t }, \
	{ "fm",	offsetof(Arrival, fm[0]),	sizeof_(Arrival, fm),	AScarray_t }, \
	{ "snr",	offsetof(Arrival, snr),	sizeof_(Arrival, snr),	ASdouble_t }, \
	{ "qual",	offsetof(Arrival, qual[0]),	sizeof_(Arrival, qual),	AScarray_t }, \
	{ "auth",	offsetof(Arrival, auth[0]),	sizeof_(Arrival, auth),	AScarray_t }, \
	{ "commid",	offsetof(Arrival, commid),	sizeof_(Arrival, commid),	ASlong_t }, \
	{ "lddate",	offsetof(Arrival, lddate[0]),	sizeof_(Arrival, lddate),	AScarray_t }, \
	{ (char *) 0 } \
}


#endif /* ARRIVAL_ASTRUCTS_H */
