/*
 *    Copyright (c) 1993-1997 Science Applications International Corporation.
 */

/*
 * NAME
 *    origin_ArrayStructs.h
 *
 * SYNOPSIS
 *    Constants and declarations for the "Origin" structure
 *    to be used with GDI Array Structs.
 *
 * AUTHOR
 *    Generated by gdi_gen_Astructs 110.2 08/20/97.
 *
 */

#ifndef ORIGIN_ASTRUCTS_H
#define ORIGIN_ASTRUCTS_H

#include "gdi_ArrayStructs.h"
#include "db_origin.h"


/*
 *  "db30" macros to convert libdb30 calls to libgdi calls
 */
#ifdef USE_DB30_MACROS
#define get_origin(table_name, where, tuples, maxrecs) \
                     gdi_where_ArrayStructs (gdi_get_stdconn(), (table_name), \
                                             (where), (void *) (tuples), \
                                             (maxrecs), &ORIGIN_CONTAINER_DEF)

#define origin_Aadd(table_name, tuples, ntuples, qa_flag) \
                     gdi_add_ArrayStructs (gdi_get_stdconn(), (table_name), \
                                           (void *) (tuples), (ntuples), \
                                           &ORIGIN_CONTAINER_DEF)
/*
 *    allocate an empty tuple as a constant.
 */
static ArrayStructsArgs ORIGIN_CONTAINER_DEF =
{
      sizeof(Origin),
      0,
      (int *) NULL,
      (void *) NULL,
      (void *) &Na_Origin,
      Origin_Attr,
      0,
      0,
      "origin"
};



static AsElemAttr Origin_Attr[] =
{
	{ "lat",	offsetof(Origin, lat),	sizeof_(Origin, lat),	ASdouble_t },
	{ "lon",	offsetof(Origin, lon),	sizeof_(Origin, lon),	ASdouble_t },
	{ "depth",	offsetof(Origin, depth),	sizeof_(Origin, depth),	ASdouble_t },
	{ "time",	offsetof(Origin, time),	sizeof_(Origin, time),	ASdouble_t },
	{ "orid",	offsetof(Origin, orid),	sizeof_(Origin, orid),	ASlong_t },
	{ "evid",	offsetof(Origin, evid),	sizeof_(Origin, evid),	ASlong_t },
	{ "jdate",	offsetof(Origin, jdate),	sizeof_(Origin, jdate),	ASlong_t },
	{ "nass",	offsetof(Origin, nass),	sizeof_(Origin, nass),	ASlong_t },
	{ "ndef",	offsetof(Origin, ndef),	sizeof_(Origin, ndef),	ASlong_t },
	{ "ndp",	offsetof(Origin, ndp),	sizeof_(Origin, ndp),	ASlong_t },
	{ "grn",	offsetof(Origin, grn),	sizeof_(Origin, grn),	ASlong_t },
	{ "srn",	offsetof(Origin, srn),	sizeof_(Origin, srn),	ASlong_t },
	{ "etype",	offsetof(Origin, etype[0]),	sizeof_(Origin, etype),	AScarray_t },
	{ "depdp",	offsetof(Origin, depdp),	sizeof_(Origin, depdp),	ASdouble_t },
	{ "dtype",	offsetof(Origin, dtype[0]),	sizeof_(Origin, dtype),	AScarray_t },
	{ "mb",	offsetof(Origin, mb),	sizeof_(Origin, mb),	ASdouble_t },
	{ "mbid",	offsetof(Origin, mbid),	sizeof_(Origin, mbid),	ASlong_t },
	{ "ms",	offsetof(Origin, ms),	sizeof_(Origin, ms),	ASdouble_t },
	{ "msid",	offsetof(Origin, msid),	sizeof_(Origin, msid),	ASlong_t },
	{ "ml",	offsetof(Origin, ml),	sizeof_(Origin, ml),	ASdouble_t },
	{ "mlid",	offsetof(Origin, mlid),	sizeof_(Origin, mlid),	ASlong_t },
	{ "algorithm",	offsetof(Origin, algorithm[0]),	sizeof_(Origin, algorithm),	AScarray_t },
	{ "auth",	offsetof(Origin, auth[0]),	sizeof_(Origin, auth),	AScarray_t },
	{ "commid",	offsetof(Origin, commid),	sizeof_(Origin, commid),	ASlong_t },
	{ "lddate",	offsetof(Origin, lddate[0]),	sizeof_(Origin, lddate),	AScarray_t },
	{ (char *) 0 }
};


#endif /* USE_DB30_MACROS */

/*
 *  The query used to create the "Origin" structures:
 *       SELECT * from origin
 *
 */
#define Na_Origin_Init \
{ \
	-999.0,	/*	lat 	*/ \
	-999.0,	/*	lon 	*/ \
	-999.0,	/*	depth 	*/ \
	-9999999999.999,	/*	time 	*/ \
	-1,	/*	orid 	*/ \
	-1,	/*	evid 	*/ \
	-1,	/*	jdate 	*/ \
	-1,	/*	nass 	*/ \
	-1,	/*	ndef 	*/ \
	-1,	/*	ndp 	*/ \
	-1,	/*	grn 	*/ \
	-1,	/*	srn 	*/ \
	"-",	/*	etype 	*/ \
	-999.0,	/*	depdp 	*/ \
	"-",	/*	dtype 	*/ \
	-999.0,	/*	mb 	*/ \
	-1,	/*	mbid 	*/ \
	-999.0,	/*	ms 	*/ \
	-1,	/*	msid 	*/ \
	-999.0,	/*	ml 	*/ \
	-1,	/*	mlid 	*/ \
	"-",	/*	algorithm 	*/ \
	"-",	/*	auth 	*/ \
	-1,	/*	commid 	*/ \
	"19700101 00:00:00"	/*	lddate 	*/ \
}

#endif /* ORIGIN_ASTRUCTS_H */
