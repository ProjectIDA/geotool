/*
 *    Copyright (c) 1993-1997 Science Applications International Corporation.
 */

/*
 * NAME
 *    stamag_ArrayStructs.h
 *
 * SYNOPSIS
 *    Constants and declarations for the "Stamag" structure
 *    to be used with GDI Array Structs.
 *
 * AUTHOR
 *    Generated by gdi_gen_Astructs 110.2 08/20/97.
 *
 */

#ifndef STAMAG_ASTRUCTS_H
#define STAMAG_ASTRUCTS_H

#include "gdi_ArrayStructs.h"
#include "db_stamag.h"


/*
 *  "db30" macros to convert libdb30 calls to libgdi calls
 */
#ifdef USE_DB30_MACROS
#define get_stamag(table_name, where, tuples, maxrecs) \
                     gdi_where_ArrayStructs (gdi_get_stdconn(), (table_name), \
                                             (where), (void *) (tuples), \
                                             (maxrecs), &STAMAG_CONTAINER_DEF)

#define stamag_Aadd(table_name, tuples, ntuples, qa_flag) \
                     gdi_add_ArrayStructs (gdi_get_stdconn(), (table_name), \
                                           (void *) (tuples), (ntuples), \
                                           &STAMAG_CONTAINER_DEF)
/*
 *    allocate an empty tuple as a constant.
 */
static ArrayStructsArgs STAMAG_CONTAINER_DEF =
{
      sizeof(Stamag),
      0,
      (int *) NULL,
      (void *) NULL,
      (void *) &Na_Stamag,
      Stamag_Attr,
      0,
      0,
      "stamag"
};



static AsElemAttr Stamag_Attr[] =
{
	{ "magid",	offsetof(Stamag, magid),	sizeof_(Stamag, magid),	ASlong_t },
	{ "ampid",	offsetof(Stamag, ampid),	sizeof_(Stamag, ampid),	ASlong_t },
	{ "sta",	offsetof(Stamag, sta[0]),	sizeof_(Stamag, sta),	AScarray_t },
	{ "arid",	offsetof(Stamag, arid),	sizeof_(Stamag, arid),	ASlong_t },
	{ "orid",	offsetof(Stamag, orid),	sizeof_(Stamag, orid),	ASlong_t },
	{ "evid",	offsetof(Stamag, evid),	sizeof_(Stamag, evid),	ASlong_t },
	{ "phase",	offsetof(Stamag, phase[0]),	sizeof_(Stamag, phase),	AScarray_t },
	{ "delta",	offsetof(Stamag, delta),	sizeof_(Stamag, delta),	ASdouble_t },
	{ "magtype",	offsetof(Stamag, magtype[0]),	sizeof_(Stamag, magtype),	AScarray_t },
	{ "magnitude",	offsetof(Stamag, magnitude),	sizeof_(Stamag, magnitude),	ASdouble_t },
	{ "uncertainty",	offsetof(Stamag, uncertainty),	sizeof_(Stamag, uncertainty),	ASdouble_t },
	{ "magres",	offsetof(Stamag, magres),	sizeof_(Stamag, magres),	ASdouble_t },
	{ "magdef",	offsetof(Stamag, magdef[0]),	sizeof_(Stamag, magdef),	AScarray_t },
	{ "mmodel",	offsetof(Stamag, mmodel[0]),	sizeof_(Stamag, mmodel),	AScarray_t },
	{ "commid",	offsetof(Stamag, commid),	sizeof_(Stamag, commid),	ASlong_t },
	{ "auth",	offsetof(Stamag, auth[0]),	sizeof_(Stamag, auth),	AScarray_t },
	{ "lddate",	offsetof(Stamag, lddate[0]),	sizeof_(Stamag, lddate),	AScarray_t },
	{ (char *) 0 }
};


#endif /* USE_DB30_MACROS */

/*
 *  The query used to create the "Stamag" structures:
 *       SELECT * from stamag
 *
 */
#define Na_Stamag_Init \
{ \
	-1,	/*	magid 	*/ \
	-1,	/*	ampid - defaulted 	*/ \
	"-",	/*	sta 	*/ \
	-1,	/*	arid 	*/ \
	-1,	/*	orid 	*/ \
	-1,	/*	evid 	*/ \
	"-",	/*	phase 	*/ \
	-1.0,	/*	delta 	*/ \
	"-",	/*	magtype 	*/ \
	-999.0,	/*	magnitude 	*/ \
	-1.0,	/*	uncertainty 	*/ \
	-999.0,	/*	magres - defaulted 	*/ \
	"-",	/*	magdef - defaulted 	*/ \
	"-",	/*	mmodel - defaulted 	*/ \
	-1,	/*	commid 	*/ \
	"-",	/*	auth 	*/ \
	"19700101 00:00:00"	/*	lddate 	*/ \
}

#endif /* STAMAG_ASTRUCTS_H */
